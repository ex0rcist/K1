[gcode_macro HOME_LAZY]
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro START_PRINT]
variable_prepare: 0
gcode:
  WAIT_TEMP_END
  CLEAR_PAUSE
  {% set g28_extruder_temp = printer.custom_macro.g28_ext_temp %}
  {% set bed_temp = printer.custom_macro.default_bed_temp %}
  {% set extruder_temp = printer.custom_macro.default_extruder_temp %}

  {% if 'BED_TEMP' in params|upper and (params.BED_TEMP|float) %}
    {% set bed_temp = params.BED_TEMP %}
  {% endif %}

  {% if 'EXTRUDER_TEMP' in params|upper and (params.EXTRUDER_TEMP|float) %}
    {% set extruder_temp = params.EXTRUDER_TEMP %}
  {% endif %}

  # CX_ROUGH_G28 EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp}
  HOME_LAZY
  # CX_NOZZLE_CLEAR
  M190 S{bed_temp}
  M109 S{extruder_temp}
  # BED_MESH_CALIBRATE
  BED_MESH_PROFILE LOAD=default
  # CX_PRINT_LEVELING_CALIBRATION
  # CX_PRINT_DRAW_ONE_LINE
  WIPE_LINE


[gcode_macro WIPE_LINE]
gcode:
  {% set z = params.Z|default(0.25)|float %}
  {% set n = params.N|default(0.4)|float %}

  HOME_LAZY
  
  {% if printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=WIPE_LINE_state
    M82
    G90
    G92 E0
    G1 X10 Y20 Z5 F3000
    G1 Z{z} F3000
    G1 X10 Y150 F1500 E10.83
    G1 X{ n + 10.0 } F5000
    G1 Y22 F1500 E21.5
    G1 Y20 F5000
    RESTORE_GCODE_STATE NAME=WIPE_LINE_state MOVE=0
  {% endif %}


[gcode_macro END_PRINT_POINT]
gcode:
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set z_safe = 0.0 %}
    {% if act_z < (max_z / 2) %}
      {% set z_safe = (max_z / 2) - act_z %}
    {% elif act_z < max_z %}
      {% set z_safe = 2.0 %}
    {% endif %}
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1.0 F180
      G1 E-{E} F4000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    G1 Z2.0 F600
    G90
    {% set y_park = printer.toolhead.axis_maximum.y/2 %}
    {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
    G1 X{x_park} Y{y_park} F30000
    {% if z_safe > 2.0 %}
      G91
      {% set z_safe = z_safe - 2.0 %}
      G1 Z{z_safe} F600
      G90
    {% endif %}
  {% else %}
    {action_respond_info("end print xyz_axes is NULL\n")}
  {% endif %}

[gcode_macro END_PRINT]
gcode:
  # Qmode_exit
  M220 S100
  # M204 S500 нахуя??
  TURN_OFF_HEATERS
  M107 P1
  M107 P2
  END_PRINT_POINT
  WAIT_TEMP_START
  M84



[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 2.0
gcode:
  SAVE_GCODE_STATE NAME=PAUSE_state
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set y_park = printer.toolhead.axis_minimum.y|float + 100 %}
  {% set x_park = printer.toolhead.axis_minimum.x|float + 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer["gcode_macro PRINTER_PARAM"].max_z_position|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set z_safe = 0.0 %}
  {% if act_z < 48.0 %}
    {% set z_safe = 50.0 - act_z %}
  {% elif act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% elif act_z < max_z %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  {action_respond_info("z_safe = %s"% (z_safe))}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=z_safe_pause VALUE={z_safe|float}
  PAUSE_BASE
  G91
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE={printer.extruder.target}
  {% if "xyz" in printer.toolhead.homed_axes %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-1.0 F180
      G1 E-{E} F4000
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    G1 Z{z_safe} F600
    M400
    G90
    G1 X{x_park} Y{y_park} F30000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
  # save fan2 value and turn off fan2
  SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=fan2_speed VALUE={printer['output_pin fan2'].value}
  {% set fspeed = printer['gcode_macro PRINTER_PARAM'].fan2_speed %}
  {action_respond_info("fan2_value = %s \n" % (fspeed))}
  # SET_PIN PIN=fan2 VALUE=0
  M106 P2 S0
  SET_E_MIN_CURRENT


[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% set E = params.E|default(2) %}
    G91
    G1 E{E} F2100
    G90
    {% if printer['gcode_macro PRINTER_PARAM'].fan2_speed > 0 %}
    # {% set fspeed = printer['gcode_macro PRINTER_PARAM'].fan2_speed %}
    # {action_respond_info("fan2_value2 = %s \n" % (fspeed))}
    # SET_PIN PIN=fan2 VALUE={(printer['gcode_macro PRINTER_PARAM'].fan2_speed * 255 + 0.5)|int}
    {% set s_value = (printer['gcode_macro PRINTER_PARAM'].fan2_speed * 255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) * 255 / (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min)|float %}
    M106 P2 S{s_value}
  {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

# [gcode_macro RESUME] # original
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   RESTORE_E_CURRENT
#   {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int != 0 %}
#     {% if printer['gcode_macro PRINTER_PARAM'].hotend_temp|int > printer.extruder.temperature %}
#       M109 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
#     {% else %}
#       M104 S{printer['gcode_macro PRINTER_PARAM'].hotend_temp|int}
#     {% endif %}
#     SET_GCODE_VARIABLE MACRO=PRINTER_PARAM VARIABLE=hotend_temp VALUE=0
#   {% endif %}
#   {% if printer['gcode_macro PRINTER_PARAM'].fan2_speed > 0 %}
#     # {% set fspeed = printer['gcode_macro PRINTER_PARAM'].fan2_speed %}
#     # {action_respond_info("fan2_value2 = %s \n" % (fspeed))}
#     # SET_PIN PIN=fan2 VALUE={(printer['gcode_macro PRINTER_PARAM'].fan2_speed * 255 + 0.5)|int}
#     {% set s_value = (printer['gcode_macro PRINTER_PARAM'].fan2_speed * 255 - printer['gcode_macro PRINTER_PARAM'].fan2_min) * 255 / (255 - printer['gcode_macro PRINTER_PARAM'].fan2_min)|float %}
#     M106 P2 S{s_value}
#   {% endif %}
#   {% set z_resume_move = printer['gcode_macro PRINTER_PARAM'].z_safe_pause|int %}
#   {% if z_resume_move > 2 %}
#     {% set z_resume_move = z_resume_move - 2 %}
#     G91
#     G1 Z-{z_resume_move} F600
#     M400
#   {% endif %}
#   {action_respond_info("z_resume_move = %s"% (z_resume_move))}
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float + 1.0 %}
#   #### get VELOCITY parameter if specified ####
#   {% if 'VELOCITY' in params|upper %}
#     {% set get_params = ('VELOCITY=' + params.VELOCITY) %}
#   {%else %}
#     {% set get_params = "" %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G91
#     G1 E{E} F2100
#     G90
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   M400
#   RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE

[delayed_gcode wait_temp]
# initial_duration: 2.
gcode:
  {% set cur_temp = printer.extruder.temperature %}
  {% if cur_temp|int < 40 %}
    {action_respond_info("end_temp!\n")}
    WAIT_TEMP_END
  {% else %}
    {action_respond_info("cur_temp = %s \n" % (cur_temp))}
    UPDATE_DELAYED_GCODE ID=wait_temp DURATION=5
  {% endif %}

[gcode_macro WAIT_TEMP_START]
gcode:
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=1
  M106 P0 S255
  # M106 P2 S255
  # tg:
  # SET_PIN PIN=fan1 VALUE=60
  # SET_PIN PIN=fan2 VALUE=200 # скорость бокового кулера, VALUE так же от 0 до 255 

[gcode_macro WAIT_TEMP_END]
gcode:
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=0
  M106 P0 S0
  # M106 P2 S0
  # M106 P0 S0 # при достижении заданной температуры не забываем выключить модельный кулер
  # M106 P1 S0 # при достижении заданной температуры не забываем выключить задний кулер
  # M106 P2 S0 # при достижении заданной температуры не забываем выключить боковой кулер