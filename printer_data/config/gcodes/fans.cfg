[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100


[temperature_sensor chamber_temp]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
min_temp: 0
max_temp: 125


# https://www.klipper3d.org/Config_Reference.html#static_digital_output
[static_digital_output my_fan_output_pins]
pins: nozzle_mcu:PB6


# Управление вентилятором через SET_PIN
# fan0 - обдув детали
[output_pin fan0]
pin: !nozzle_mcu:PB8
pwm: True
cycle_time: 0.0100
hardware_pwm: false
value: 0.00
scale: 255
shutdown_value: 0.0


# Управление вентилятором через SET_PIN
# fan1 - вытяжной
[output_pin fan1]
pin: PC0
pwm: True
cycle_time: 0.0100
hardware_pwm: false
value: 0.00
scale: 255
shutdown_value: 0.0


# Управление вентилятором через SET_PIN
# fan2 - боковой
[output_pin fan2]
pin: PB1
pwm: True
cycle_time: 0.0100
hardware_pwm: false
value: 0.00
scale: 255
shutdown_value: 0.0


# https://www.klipper3d.org/Config_Reference.html?h=controller_fan#duplicate_pin_override
# позволяет повторно определять конфигурацию пинов без проверки на ошибки
[duplicate_pin_override]
pins: PC0, PC5, PB2, ADC_TEMPERATURE


# Управление вентилятором охлаждения головы (горла)
# Включено от 40 градусов на нагревателе
[heater_fan heatbreak_fan]
pin: nozzle_mcu:PB5
heater: extruder
heater_temp: 40


# позволяет контролировать температуру камеры
[temperature_fan chamber_fan]
pin: PC0
cycle_time: 0.0100
hardware_pwm: false
max_power: 1
shutdown_speed: 0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC5
min_temp: 0
max_temp: 70
control: watermark
max_delta: 2
target_temp: 35.0
max_speed: 1.0
min_speed: 0.0


# позволяет контролировать температуру подвала
[controller_fan cpu_fan]
pin: PB2
fan_speed: 0.7
idle_speed: 0.5
shutdown_speed: 1.0
idle_timeout: 30
heater: extruder
stepper: stepper_x, stepper_y, stepper_z


# [temperature_fan cpu_fan] # BUG: показывает разные температуры на вентиляторе и mcu_temp ?
# pin: PB2
# cycle_time: 0.0100
# hardware_pwm: false
# max_power: 1
# shutdown_speed: 0
# sensor_type: temperature_mcu
# min_temp: 0
# max_temp: 100
# control: watermark
# max_delta: 2
# target_temp: 50.0
# max_speed: 1.0
# min_speed: 0.0


# позволяет редактировать управление пином в runtime
# [output_pin cpu_fan]
# pin: PB2
# pwm: True
# cycle_time: 0.0100
# hardware_pwm: false
# value: 0.00
# scale: 255
# shutdown_value: 0.0


##########################################
################# GCODES #################


# Включить вентилятор
# M106 S255 - обдув детали # fan0
# M106 P1 S255 - вытяжной # fan1
# M106 P2 S255 - боковой # fan2
# Для совместимости с OrcaSlicer добавлен P3 на вытяжной вентилятор (M106 P3 Sxx):
[gcode_macro M106] 
gcode:
  {% set fans = printer["gcode_macro PRINTER_PARAM"].fans|int %}
  {% set fan = 0 %}
  {% set value = 0 %}

  {% if params.P is defined %}
    {% set tmp = params.P|int %}
    {% if tmp < fans %}
      {% set fan = tmp %}
    {% endif %}
  {% endif %}

  {% if params.S is defined %}
    {% set tmp = params.S|float %}
  {% else %}
    {% set tmp = 255 %}
  {% endif %}

  {% if tmp > 0 %}
    {% if fan == 0 %}
      {% set value = printer["gcode_macro PRINTER_PARAM"].fan0_min + (255 - printer["gcode_macro PRINTER_PARAM"].fan0_min) / 255 * tmp %}
    {% endif %}
    {% if fan == 1 %}
      {% set value = printer["gcode_macro PRINTER_PARAM"].fan1_min + (255 - printer["gcode_macro PRINTER_PARAM"].fan1_min) / 255 * tmp %}
    {% endif %}
    {% if fan == 2 %}
      {% set value = printer["gcode_macro PRINTER_PARAM"].fan2_min + (255 - printer["gcode_macro PRINTER_PARAM"].fan2_min) / 255 * tmp %}
    {% endif %}
  {% endif %}

  {% if value >= 255 %}
    {% set value = 255 %}
  {% endif %}

  {% if params.P is defined and params.P|int == 3 %}
    {% set fan = 1 %}
  {% endif %}

  SET_PIN PIN=fan{fan} VALUE={value}


# Выключить вентилятор
[gcode_macro M107] 
gcode:
  {% set fans = printer["gcode_macro PRINTER_PARAM"].fans|int %}
  {% if params.P is defined %}
    {% if params.P|int < fans %}
      SET_PIN PIN=fan{params.P|int} VALUE=0
    {% else %}
      SET_PIN PIN=fan0 VALUE=0
    {% endif %}
  {% else %}
    SET_PIN PIN=fan0 VALUE=0
    SET_PIN PIN=fan1 VALUE=0
    SET_PIN PIN=fan2 VALUE=0
  {% endif %}


# Установить ограничение на температуру в камере
# M141 Snn
# nn - максимальная температура, после которой должен включиться fan1
[gcode_macro M141]
description: Set maximum temperature of chamber fan
gcode:
  {% set s = params.S|default(30)|float %}
  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={s} # TEMPERATURE_FAN=chamber?
  { action_respond_info("Chamber target temperature: %s°C" % (s)) }


# Дождаться нагрева камеры через нагрев кровати
# TODO: разобраться
[gcode_macro M191]
description: Wait for Chamber Temperature to heat up
gcode:
  {% set s = params.S|float %}
  {% set chamber_temp = printer["temperature_sensor chamber_temp"].temperature|float %}
  
  {% if s > 0 %}
    M141 S{s}
  {% endif %}

  {% if s > chamber_temp and s <= 90 %}
    M140 S100
    { action_respond_info("Waiting for the bed to heat up the chamber...") }
    TEMPERATURE_WAIT SENSOR="temperature_fan chamber_fan" MINIMUM={s-1}
    { action_respond_info("Chamber target temperature reached: %s°C" % (s)) }
    M140 S{s}
  {% endif %}



